  (defn seq-of-nodes-new
       [func]
           (map func (iterate (partial + 1) 0))
    )
  (defn euler-node [n]
         (let [current (+ n 1)] (/ 6.0 (* current current)))
       )
(def euler-reductions
              (map (fn [sum] (Math/sqrt sum))  (reductions + (seq-of-nodes-new euler-node) ) ) 
(take 100 euler-reductions)
)
(def euler-reductions
(map (fn [sum] (Math/sqrt sum))  (reductions + (seq-of-nodes-new euler-node) )) ) 
(take 100 euler-reductions)
exit
(require '[clj-http.client :as client])
(client/get "http://example.com/resources/id")
(client/get "http://127.0.0.1:8001/api/v1/pods")
(client/get "http://127.0.0.1:8001/api/v1/pods" {:as :json})
(client/get "http://127.0.0.1:8001/api/v1/pods" {:as :json-string-keys})
(client/get "http://127.0.0.1:8001/api/v1/pods")
(type (client/get "http://127.0.0.1:8001/api/v1/pods"))
(keys (client/get "http://127.0.0.1:8001/api/v1/pods"))
(:body (client/get "http://127.0.0.1:8001/api/v1/pods"))
(:require [clojure.data.json :as json])
exit
(:body (client/get "http://127.0.0.1:8001/api/v1/pods"))
(require '[clj-http.client :as client])
(:body (client/get "http://127.0.0.1:8001/api/v1/pods"))
(:require [clojure.data.json :as json])
json
(read-json (:body (client/get "http://127.0.0.1:8001/api/v1/pods")))
exit
(:require [cheshire.core :refer :all])
exit
(:require [cheshire.core :refer :all])
exit
(ns my.ns
  (:require [cheshire.core :refer :all]))
 (:require [cheshire.core :refer :all])
(generate-string {:foo "bar" :baz 5})
(re(require '[clj-http.client :as client])
{)
(require '[clj-http.client :as client])
(read-json (:body (client/get "http://127.0.0.1:8001/api/v1/pods")))
 (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))
(read-json (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods")))))
(parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods")))
(keys (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(keys (parse-string (:body (client/post "http://127.0.0.1:8001/api/v1/pods"))))
"localhost:8001/apis/apps/v1/statefulsets"
(keys (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(:items (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
 (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods")))
(:keys  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods")))
(:keys  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(keys  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(:items  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(items  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
("items"  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(:body (client/get "http://127.0.0.1:8001/api/v1/pods"))
(length  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(type  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(assoc  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) :items)
(count  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(first  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))))
(nth  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) 1)
(rest  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
exit
("items"  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(ns my.ns
  (:require [cheshire.core :refer :all]))
(require '[clj-http.client :as client])
("items"  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(:items  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(:metadata  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(first  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(:kind  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(kind  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
 (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) 
(keys  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(:apiVersion  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(array-map :a 10)
(keys (array-map :a 10))
(:a (array-map :a 10))
( "a" (array-map :a 10))
(keys (array-map "a" 10))
(keys  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) )
(array-map "a" 10)
(get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items")
(nth (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items") 2)
(keys (nth (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items") 2))
(get (nth (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items") 2) "status")
(keys (get (nth (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items") 2) "status"))
(get (get (nth (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items") 2) "status") "podIP")
 (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items")
(map  (fn [x] x  ) (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items"))
(map  (fn [x] (get (get x "status") "podIP")  ) (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items"))
/api/v1/namespaces/clj-statefulset-sse/pods
(client/get "http://127.0.0.1:8001/api/v1/pods")
(client/get "http://127.0.0.1:8001/api/v1/namespaces/clj-pedestal-sse/pods")
(client/get "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods")
(count (client/get "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods"))
(ns my.ns
  (:require [cheshire.core :refer :all]))
(require '[clj-http.client :as client])
(client/get "http://127.0.0.1:8001/api/v1/pods")
(ns my.ns
  (:require [cheshire.core :refer :all]))
(require '[clj-http.client :as client])
(client/get "http://127.0.0.1:8001/api/v1/pods")
(count (client/get "http://127.0.0.1:8001/api/v1/pods"))
(client/get "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods")
(count (client/get "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods"))
(ns my.ns
  (:require [cheshire.core :refer :all]))
(require '[clj-http.client :as client])
(client/get "http://127.0.0.1:8001/api/v1/pods")
 (map  (fn [x] (get (get x "status") "podIP")  ) (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/pods"))) "items"))
 (map  (fn [x] (get (get x "status") "podIP")  ) (get  (parse-string (:body (client/get "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods"))) "items"))
(use 'java-time)
(exit)
(ns server-sent-events.service
  (:require [cheshire.core))
(ns server-sent-events.service (:require [cheshire.core]))
(generate-string {"apiVersion" "v1" "kind" "Service"  "metadata" {"name" "clj-pedestal-sse"   "namespace" "clj-ctrl\)
"  "labels" {"app" "clj-pedestal-sse"}} "spec" { "ports" [{"port" 8080 "name" "web"  } ]  "clusterIP" "None" \
"selector" {"app" "clj-pedestal-sse"} }}
(generate-string {"apiVersion" "v1" "kind" "Service"  "metadata" {"name" "clj-pedestal-sse"   "namespace" "clj-ctrl"  "labels" {"app" "clj-pedestal-sse"}} "spec" { "ports" [{"port" 8080 "name" "web"  } ]  "clusterIP" "None" "selector" {"app" "clj-pedestal-sse"} }})
(def u '(atom))
(swap! u concat '("a" "b" "c"))
(def u (atom))
(def u (atom '()))
(swap! u concat '("a" "b" "c"))
@u
(join "," @u)
(clojure/string/join "," @u)
(clojure/string.join "," @u)
(reduce str @u)
(interpose "," @u)
(reduce str (interpose "," @u))
exit
(ns server-sent-events.service
  (:require [http.async.client :as http0]))
(def live-ips (atom '()))
(with-open [client (http0/create-client)] (let [resp (http0/GET client "http://127.0.0.1:8001/api/v1/namespaces/clj-ctr\
l/pods")
]
    (http0/await resp)9))))
____)))))
(with-open [client (http0/create-client)] (let [resp (http0/GET client "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods")] (http0/await resp) (def nn (http0/string resp))))
nn
(body nn)
(:body nn)
(get nn "items")
nn
(parse-string nn)
(:body (parse-string nn))
(get (parse-string nn) "items")
 (map  (fn [x] (get (get x "status") "podIP")  )(get (parse-string nn) "items"))
(exit)
exit
(ns server-sent-events.service
  (:require [http.async.client :as http0]))
(def live-ips (atom '("yo nigga!")))
(with-open [client (http0/create-client)] (let [resp (http0/GET client "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods")] (http0/await resp) (def nn (map  (fn [x] (get (get x "status") "podIP")  ) (get (p\
arse-string  (http0/string resp)) "items" ))
))
(with-open [client (http0/create-client)] (let [resp (http0/GET client "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods")] (http0/await resp) (def nn (map  (fn [x] (get (get x "status") "podIP")  ) (get (parse-string  (http0/string resp)) "items" )))))
nn
(swap! live-ips concat nn)
(with-open [client (http0/create-client)] ; Create client
  (let [resp (http0/GET client "http://127.0.0.1:8001/api/v1/namespaces/clj-ctrl/pods")
]
    (http0/await resp)
(swap! live-ips concat  (map  (fn [x] (get (get x "status") "podIP")  ) (get (parse-string  (http0/string resp)) "items" ))
    {:status 200 :body "Ya hecho"} )))
exit
